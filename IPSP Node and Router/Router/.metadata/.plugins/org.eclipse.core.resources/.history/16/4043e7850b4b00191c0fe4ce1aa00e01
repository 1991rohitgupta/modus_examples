/*******************************************************************************
* File Name: BLEFindMe.c
*
* Version: 2.00
*
* Description:
*  This file contains BLE related functions.
*
********************************************************************************
* Copyright 2018-2019, Cypress Semiconductor Corporation.  All rights reserved.
* You may use this file only in accordance with the license, terms, conditions,
* disclaimers, and limitations in the end user license agreement accompanying
* the software package with which this file was provided.
*******************************************************************************/

#include <common.h>

/*******************************************************************************
* Variables to keep track of BLE connection handle
*******************************************************************************/

uint16_t                                    connIntv;                    /* in milliseconds / 1.25ms */
bool                                        l2capConnected = false;
cy_stc_ble_l2cap_cbfc_conn_cnf_param_t      l2capParameters;
cy_stc_ble_conn_handle_t                    appConnHandle;
cy_stc_ble_gap_bd_addr_t                    peerAddr[CY_BLE_MAX_ADV_DEVICES];
volatile uint32_t                           mainTimer = 1u;
uint8_t                                     advDevices = 0u;
uint8_t                                     deviceN = 0u;
uint8_t                                     state = STATE_INIT;
static uint16_t                             ipv6LoopbackBuffer[L2CAP_MAX_LEN/2];
uint8_t                                     custom_command = 0u;
cy_stc_ble_timer_info_t                     timerParam = { .timeout = TIMER_TIMEOUT };
char8 										command;


/* BLESS interrupt configuration structure */
const cy_stc_sysint_t  blessIsrCfg =
{
    /* The BLESS interrupt */
    .intrSrc       = bless_interrupt_IRQn,

    /* The interrupt priority number */
    .intrPriority  = 1u
};


/*******************************************************************************
*        Function prototypes
*******************************************************************************/
void StackEventHandler(uint32 event, void* eventParam);
void EnterLowPowerMode(void);

/******************************************************************************
* Function Name: CheckAdvPacketForServiceUuid
*******************************************************************************
*
* Summary:
*  This function parses advertising packet and returns nonzero value
*  when the packet contains service UUID equal to input parameter.
*
* Parameters:
*  eventParam: the pointer to a data structure specified by the event.
*  uuid: 16-bit UUID of the service.
*
* Return:
*  Nonzero value when the advertising packet contains service UUID.
*
******************************************************************************/
uint32_t CheckAdvPacketForServiceUuid(cy_stc_ble_gapc_adv_report_param_t *eventParam, uint16_t uuid)
{
    uint32_t servicePresent = NO;
    uint32_t advIndex = 0u;
    uint32_t i;

    do
    {
        /* Find complete or incomplete Service UUID list field type. */
        if((eventParam->data[advIndex + 1u] == (uint8)CY_BLE_GAP_ADV_INCOMPL_16UUID) ||
           (eventParam->data[advIndex + 1u] == (uint8)CY_BLE_GAP_ADV_COMPL_16UUID))
        {
            /* Compare uuid values with input parameter */
            for(i = 0u; (i < (eventParam->data[advIndex] - 1u)) && (servicePresent == NO); i += sizeof(uint16))
            {
                if(Cy_BLE_Get16ByPtr(&eventParam->data[advIndex + 2u + i]) == uuid)
                {
                    servicePresent = 1u;
                }
            }
        }
        advIndex += eventParam->data[advIndex] + 1u;
    }while((advIndex < eventParam->dataLen) && (servicePresent == NO));

    return(servicePresent);
}


/*******************************************************************************
* Function Name: BlessInterrupt
*******************************************************************************/
void BlessInterrupt(void)
{
    Cy_BLE_BlessIsrHandler();
}

/*******************************************************************************
* Function Name: BleFindMe_Init()
********************************************************************************
*
* Summary:
*   This function initializes the BLE and UART components for use in the code
*   code example.
*
* Parameters:
*  None
*
* Return:
*   None
*
*******************************************************************************/
void HostInit(void)
{
    cy_stc_ble_stack_lib_version_t  stackVersion;
    cy_en_ble_api_result_t          apiResult;
	/* Set up the device based on configurator selections */
	init_cycfg_all();


    /* Unfreeze IO if device is waking up from hibernate */
    if(Cy_SysPm_GetIoFreezeStatus())
    {
        Cy_SysPm_IoUnfreeze();
    }

    /* Start the UART debug port */
    UART_DEBUG_START();
    DEBUG_PRINTF("\r\n\nPSoC 6 MCU with BLE IPSP Router \r\n");

    /* Initialize the BLESS interrupt */
    cy_ble_config.hw->blessIsrConfig = &blessIsrCfg;
    Cy_SysInt_Init(cy_ble_config.hw->blessIsrConfig, BlessInterrupt);

    /* Register the generic event handler */
    Cy_BLE_RegisterEventCallback(StackEventHandler);

    /* Initialize the BLE host */
    apiResult = Cy_BLE_Init(&cy_ble_config);

    if(apiResult != CY_BLE_SUCCESS)
    {
        /* BLE stack initialization failed, check configuration,
           notify error and halt CPU in debug mode */
        DEBUG_PRINTF("Cy_BLE_Init API Error: %x \r\n", apiResult);
        ShowError();
    }
    else
    {
        DEBUG_PRINTF("Cy_BLE_Init API Success: %x \r\n", apiResult);
    }

    /* Enable BLE */
    apiResult = Cy_BLE_Enable();
    if(apiResult != CY_BLE_SUCCESS)
    {
        /* BLE stack initialization failed, check configuration,
           notify error and halt CPU in debug mode */
        DEBUG_PRINTF("Cy_BLE_Enable API Error: %x \r\n", apiResult);
        ShowError();
    }
    else
    {
        DEBUG_PRINTF("Cy_BLE_Enable API Success: %x \r\n", apiResult);
    }

    /* Enable BLE Low Power Mode (LPM) */
    Cy_BLE_EnableLowPowerMode();

	apiResult = Cy_BLE_GetStackLibraryVersion(&stackVersion);

    if(apiResult != CY_BLE_SUCCESS)
    {
        DEBUG_PRINTF("Cy_BLE_GetStackLibraryVersion API Error: 0x%2.2x \r\n", apiResult);
        ShowError();
    }
    else
    {
        DEBUG_PRINTF("Stack Version: %d.%d.%d.%d \r\n", stackVersion.majorVersion,
            stackVersion.minorVersion, stackVersion.patch, stackVersion.buildNumber);
    }

}

void ProcessUartCommands()
{
	cy_en_ble_api_result_t          			apiResult;

    if(((command = UART_DEB_GET_CHAR()) != UART_DEB_NO_DATA) || ((custom_command != 0) &&
        (cy_ble_busyStatus[appConnHandle.attId] == 0u)))
    {
        if(custom_command != 0u)
        {
            command = custom_command;
            custom_command = 0u;
        }
        switch(command)
        {
        case 'c':                   /* Send connect request to selected peer device.  */
        	DEBUG_PRINTF("Stop Scan and connect to peripheral\r\n");
        	Cy_BLE_GAPC_StopScan();
            state = STATE_CONNECTING;
            break;

        case 'v':                   /* Cancel connection request. */
            apiResult = Cy_BLE_GAPC_CancelDeviceConnection();
            DEBUG_PRINTF("Cy_BLE_GAPC_CancelDeviceConnection: %x\r\n" , apiResult);
            break;

        case 'd':                   /* Send disconnect request to peer device. */
            {
            	DEBUG_PRINTF("disconnect from peripheral\r\n");
                cy_stc_ble_gap_disconnect_info_t disconnectInfoParam =
                {
                    .bdHandle = appConnHandle.bdHandle,
                    .reason = CY_BLE_HCI_ERROR_OTHER_END_TERMINATED_USER
                };
                apiResult = Cy_BLE_GAP_Disconnect(&disconnectInfoParam);
                if(apiResult != CY_BLE_SUCCESS)
                {
                    DEBUG_PRINTF("DisconnectDevice API Error: 0x%x \r\n", apiResult);
                }
                state = STATE_DISCONNECTED;
            }
            break;

        case 's':                   /* Start discovery procedure. */
        	DEBUG_PRINTF("StartDiscovery \r\n");
        	apiResult = Cy_BLE_GATTC_StartDiscovery(appConnHandle);
            if(apiResult != CY_BLE_SUCCESS)
            {
                DEBUG_PRINTF("StartDiscovery API Error: 0x%x \r\n", apiResult);
            }
            break;

        case 'z':                   /* Select specific peer device.  */
            DEBUG_PRINTF("Select Device:\n");
            while((command = UART_DEB_GET_CHAR()) == UART_DEB_NO_DATA);
            if((command >= '0') && (command <= '9'))
            {
                deviceN = (uint8)(command - '0');
                DEBUG_PRINTF("%c\n",command); /* print number */
            }
            else
            {
                DEBUG_PRINTF(" Wrong digit..press 'z' again \r\n");
                break;
            }
            break;

            /**********************************************************
            *               L2Cap Commands (WrapAround)
            ***********************************************************/
        case '1':                   /* Send Data packet to node through IPSP channel */
            {
                static uint16_t counter = 0;
                static uint16_t repeats = 0;
                uint16_t i;
                cy_stc_ble_l2cap_cbfc_tx_data_info_t l2capCbfcTxDataParam;

                DEBUG_PRINTF("-> Cy_BLE_L2CAP_ChannelDataWrite #%d \r\n", repeats++);
                (void)repeats;
            #if(DEBUG_UART_FULL)
                DEBUG_PRINTF(", Data:");
            #endif /* DEBUG_UART_FULL */
                /* Fill output buffer by counter */
                for(i = 0u; i < L2CAP_MAX_LEN / 2u; i++)
                {
                    ipv6LoopbackBuffer[i] = counter++;
                #if(DEBUG_UART_FULL)
                    DEBUG_PRINTF("%4.4x", ipv6LoopbackBuffer[i]);
                #endif /* DEBUG_UART_FULL */
                }
                l2capCbfcTxDataParam.buffer = (uint8_t *)ipv6LoopbackBuffer;
                l2capCbfcTxDataParam.bufferLength = L2CAP_MAX_LEN;
                l2capCbfcTxDataParam.localCid = l2capParameters.lCid;
                apiResult = Cy_BLE_L2CAP_ChannelDataWrite(&l2capCbfcTxDataParam);
                if(apiResult != CY_BLE_SUCCESS)
                {
                    DEBUG_PRINTF("Cy_BLE_L2CAP_ChannelDataWrite API Error: 0x%x \r\n", apiResult);
                }
            }
            break;

        case 'h':                   /* Help menu */
            DEBUG_PRINTF("\r\n");
            DEBUG_PRINTF("Available commands:\r\n");
            DEBUG_PRINTF(" \'h\' - Help menu.\r\n");
            DEBUG_PRINTF(" \'z\' + 'Number' - Select peer device.\r\n");
            DEBUG_PRINTF(" \'c\' - Send connect request to peer device.\r\n");
            DEBUG_PRINTF(" \'d\' - Send disconnect request to peer device.\r\n");
            DEBUG_PRINTF(" \'v\' - Cancel connection request.\r\n");
            DEBUG_PRINTF(" \'s\' - Start discovery procedure.\r\n");
            DEBUG_PRINTF(" \'1\' - Send Data packet to Node through IPSP channel.\r\n");
            break;
        }
    }
}
/*******************************************************************************
* Function Name: BleIPSPRouter_Process()
********************************************************************************
*
* Summary:
*   This function processes the BLE events and configures the device to enter
*   low power mode as required.
*
* Parameters:
*  None
*
* Return:
*   None
*
*******************************************************************************/

void BleIPSPRouter_Process(void)
{
    /* The call to EnterLowPowerMode also causes the device to enter hibernate
       mode if the BLE stack is shutdown */
    EnterLowPowerMode();
    /* Cy_BLE_ProcessEvents() allows BLE stack to process pending events */
    Cy_BLE_ProcessEvents();

    /* Restart timer */
    if(mainTimer != 0u)
    {
        mainTimer = 0u;
        Cy_BLE_StartTimer(&timerParam);
    }

    ProcessUartCommands();
}

/*******************************************************************************
* Function Name: StackEventHandler()
********************************************************************************
*
* Summary:
*   This is an event callback function to receive events from the BLE Component.
*
* Parameters:
*  uint32 event:      event from the BLE component
*  void* eventParam:  parameters related to the event
*
* Return:
*   None
*
*******************************************************************************/
void StackEventHandler(uint32 event, void* eventParam)
{
    cy_en_ble_api_result_t apiResult;
    cy_stc_ble_gapc_adv_report_param_t *advReport;
    uint8_t newDevice = 0u;
    uint16_t i;
    static cy_stc_ble_gap_sec_key_info_t keyInfo =
    {
        .localKeysFlag    = CY_BLE_GAP_SMP_INIT_ENC_KEY_DIST |
                            CY_BLE_GAP_SMP_INIT_IRK_KEY_DIST |
                            CY_BLE_GAP_SMP_INIT_CSRK_KEY_DIST,
        .exchangeKeysFlag = CY_BLE_GAP_SMP_INIT_ENC_KEY_DIST |
                            CY_BLE_GAP_SMP_INIT_IRK_KEY_DIST |
                            CY_BLE_GAP_SMP_INIT_CSRK_KEY_DIST |
                            CY_BLE_GAP_SMP_RESP_ENC_KEY_DIST |
                            CY_BLE_GAP_SMP_RESP_IRK_KEY_DIST |
                            CY_BLE_GAP_SMP_RESP_CSRK_KEY_DIST,
    };

    switch (event)
    {
        /**********************************************************
        *                       General Events
        ***********************************************************/
        case CY_BLE_EVT_STACK_ON: /* This event received when component is Started */
           {
                DEBUG_PRINTF("CY_BLE_EVT_STACK_ON, StartAdvertisement \r\n");
                /* Register IPSP protocol multiplexer to L2CAP and
                *  set the initial Receive Credit Low Mark for Based Flow Control mode
                */
                cy_stc_ble_l2cap_cbfc_psm_info_t l2capCbfcPsmParam =
                {
                    .creditLwm = LE_WATER_MARK_IPSP,
                    .l2capPsm  = CY_BLE_L2CAP_PSM_LE_PSM_IPSP,
                };
                apiResult = Cy_BLE_L2CAP_CbfcRegisterPsm(&l2capCbfcPsmParam);
                if(apiResult != CY_BLE_SUCCESS)
                {
                    DEBUG_PRINTF("Cy_BLE_L2CAP_CbfcRegisterPsm API Error: 0x%x \r\n", apiResult);
                }

                /* Start Limited Discovery */
                apiResult = Cy_BLE_GAPC_StartScan(CY_BLE_SCANNING_FAST, 0u);
                if(apiResult != CY_BLE_SUCCESS)
                {
                    DEBUG_PRINTF("StartScan API Error: 0x%x \r\n", apiResult);
                }
                else
                {
                    DEBUG_PRINTF("Bluetooth On, StartScan with addr: ");

                }

                /* Generates the security keys */
                apiResult = Cy_BLE_GAP_GenerateKeys(&keyInfo);
                if(apiResult != CY_BLE_SUCCESS)
                {
                    DEBUG_PRINTF("Cy_BLE_GAP_GenerateKeys API Error: 0x%x \r\n", apiResult);
                }

                break;
            }

        case CY_BLE_EVT_TIMEOUT:
            if((((cy_stc_ble_timeout_param_t *)eventParam)->reasonCode == CY_BLE_GENERIC_APP_TO) &&
               (((cy_stc_ble_timeout_param_t *)eventParam)->timerHandle == timerParam.timerHandle))
            {
                /* Update Led State */


                /* Indicate that timer is raised to the main loop */
                mainTimer++;
            }
            else
            {
                DEBUG_PRINTF("CY_BLE_EVT_TIMEOUT: %x \r\n", *(cy_en_ble_to_reason_code_t *)eventParam);
            }
            break;

        case CY_BLE_EVT_HARDWARE_ERROR:    /* This event indicates that some internal HW error has occurred. */
            DEBUG_PRINTF("Hardware Error: 0x%x \r\n", *(uint8_t *)eventParam);
            break;

        /* This event will be triggered by host stack if BLE stack is busy or not busy.
         *  Parameter corresponding to this event will be the state of BLE stack.
         *  BLE stack busy = CY_BLE_STACK_STATE_BUSY,
         *  BLE stack not busy = CY_BLE_STACK_STATE_FREE
         */
        case CY_BLE_EVT_STACK_BUSY_STATUS:
            DEBUG_PRINTF("CY_BLE_EVT_STACK_BUSY_STATUS: %x\r\n", *(uint8_t *)eventParam);
            break;

        case CY_BLE_EVT_SET_TX_PWR_COMPLETE:
            DEBUG_PRINTF("CY_BLE_EVT_SET_TX_PWR_COMPLETE \r\n");
            break;

        case CY_BLE_EVT_LE_SET_EVENT_MASK_COMPLETE:
            DEBUG_PRINTF("CY_BLE_EVT_LE_SET_EVENT_MASK_COMPLETE \r\n");
            break;

        case CY_BLE_EVT_SET_DEVICE_ADDR_COMPLETE:
            DEBUG_PRINTF("CY_BLE_EVT_SET_DEVICE_ADDR_COMPLETE \r\n");

            /* Reads the BD device address from BLE Controller's memory */
            apiResult = Cy_BLE_GAP_GetBdAddress();
            if(apiResult != CY_BLE_SUCCESS)
            {
                DEBUG_PRINTF("Cy_BLE_GAP_GetBdAddress API Error: 0x%x \r\n", apiResult);
            }
            break;

        case CY_BLE_EVT_GET_DEVICE_ADDR_COMPLETE:
            DEBUG_PRINTF("CY_BLE_EVT_GET_DEVICE_ADDR_COMPLETE: ");
            for(i = CY_BLE_GAP_BD_ADDR_SIZE; i > 0u; i--)
            {
                DEBUG_PRINTF("%2.2x", ((cy_stc_ble_bd_addrs_t *)
                                    ((cy_stc_ble_events_param_generic_t *)eventParam)->eventParams)->publicBdAddr[i-1]);
            }
            DEBUG_PRINTF("\r\n");
            break;


        /**********************************************************
        *                       GAP Events
        ***********************************************************/
        /* This event provides the remote device lists during discovery process. */
        case CY_BLE_EVT_GAPC_SCAN_PROGRESS_RESULT:
            advReport = (cy_stc_ble_gapc_adv_report_param_t *)eventParam;
            /* Filter and connect only to nodes that advertise IPSS in ADV payload */
            if(CheckAdvPacketForServiceUuid(advReport, CY_BLE_UUID_INTERNET_PROTOCOL_SUPPORT_SERVICE) != 0u)
            {
                for(newDevice = 1u, i = 0u; i < advDevices; i++)
                {
                    /* Compare device address with already logged one */
                    if((memcmp(peerAddr[i].bdAddr, advReport->peerBdAddr, CY_BLE_GAP_BD_ADDR_SIZE) == 0))
                    {
                        newDevice = 0u;
                        break;
                    }
                }
                if(newDevice != 0u)
                {
                    DEBUG_PRINTF("Advertisement report: eventType = %x, peerAddrType - %x, ",
                        advReport->eventType, advReport->peerAddrType);
                    DEBUG_PRINTF("peerBdAddr - ");
                    if(advDevices < CY_BLE_MAX_ADV_DEVICES)
                    {
                        memcpy(peerAddr[advDevices].bdAddr, advReport->peerBdAddr, CY_BLE_GAP_BD_ADDR_SIZE);
                        peerAddr[advDevices].type = advReport->peerAddrType;
                        DEBUG_PRINTF("%x: ",advDevices);
                        advDevices++;
                    }

                for(i = CY_BLE_GAP_BD_ADDR_SIZE; i > 0u; i--)
                {
                    DEBUG_PRINTF("%2.2x", advReport->peerBdAddr[i-1]);
                }
                DEBUG_PRINTF(", rssi - %d dBm", advReport->rssi);
            #if(DEBUG_UART_FULL)
                DEBUG_PRINTF(", data - ");
                for( i = 0; i < advReport->dataLen; i++)
                {
                    DEBUG_PRINTF("%2.2x ", advReport->data[i]);
                }
            #endif /* DEBUG_UART_FULL */
                DEBUG_PRINTF("\r\n");
                }
            }
            break;

        case CY_BLE_EVT_GAPC_SCAN_START_STOP:
            DEBUG_PRINTF("CY_BLE_EVT_GAPC_SCAN_START_STOP, state: %x\r\n", Cy_BLE_GetScanState());
            if(Cy_BLE_GetScanState() == CY_BLE_SCAN_STATE_STOPPED)
            {
                if(state == STATE_CONNECTING)
                {
                    DEBUG_PRINTF("GAPC_END_SCANNING\r\n");
                    /* Connect to selected device */
                    DEBUG_PRINTF("Connecting to BD Address: ");
                    for(i = CY_BLE_GAP_BD_ADDR_SIZE; i > 0u; i--)
                    {
                        DEBUG_PRINTF("%2.2x", peerAddr.bdAddr[i-1]);
                    }
                    apiResult = Cy_BLE_GAPC_ConnectDevice(&peerAddr[deviceN], 0u);
                    if(apiResult != CY_BLE_SUCCESS)
                    {
                        DEBUG_PRINTF("ConnectDevice API Error: 0x%x \r\n", apiResult);
                    }
                }
                else
                {
                }
            }
            break;

        case CY_BLE_EVT_GAP_AUTH_REQ:
            DEBUG_PRINTF("CY_BLE_EVT_GAP_AUTH_REQ: bdHandle=%x, security=%x, bonding=%x, ekeySize=%x, err=%x \r\n",
                (*(cy_stc_ble_gap_auth_info_t *)eventParam).bdHandle,
                (*(cy_stc_ble_gap_auth_info_t *)eventParam).security,
                (*(cy_stc_ble_gap_auth_info_t *)eventParam).bonding,
                (*(cy_stc_ble_gap_auth_info_t *)eventParam).ekeySize,
                (*(cy_stc_ble_gap_auth_info_t *)eventParam).authErr);

            if(cy_ble_configPtr->authInfo[CY_BLE_SECURITY_CONFIGURATION_0_INDEX].security ==
                (CY_BLE_GAP_SEC_MODE_1 | CY_BLE_GAP_SEC_LEVEL_1))
            {
                cy_ble_configPtr->authInfo[CY_BLE_SECURITY_CONFIGURATION_0_INDEX].authErr =
                    CY_BLE_GAP_AUTH_ERROR_PAIRING_NOT_SUPPORTED;
            }

            cy_ble_configPtr->authInfo[CY_BLE_SECURITY_CONFIGURATION_0_INDEX].bdHandle =
                ((cy_stc_ble_gap_auth_info_t *)eventParam)->bdHandle;

            apiResult = Cy_BLE_GAPP_AuthReqReply(&cy_ble_configPtr->authInfo[CY_BLE_SECURITY_CONFIGURATION_0_INDEX]);
            if(apiResult != CY_BLE_SUCCESS)
            {
                Cy_BLE_GAP_RemoveOldestDeviceFromBondedList();
                apiResult = Cy_BLE_GAPP_AuthReqReply(&cy_ble_configPtr->authInfo[CY_BLE_SECURITY_CONFIGURATION_0_INDEX]);
                if(apiResult != CY_BLE_SUCCESS)
                {
                    DEBUG_PRINTF("Cy_BLE_GAPP_AuthReqReply API Error: 0x%x \r\n", apiResult);
                }
            }
            break;

        case CY_BLE_EVT_GAP_PASSKEY_ENTRY_REQUEST:
            DEBUG_PRINTF("CY_BLE_EVT_PASSKEY_ENTRY_REQUEST press 'p' to enter passkey \r\n");
            break;

        case CY_BLE_EVT_GAP_PASSKEY_DISPLAY_REQUEST:
            DEBUG_PRINTF("CY_BLE_EVT_PASSKEY_DISPLAY_REQUEST %6.6ld \r\n", *(uint32_t *)eventParam);
            break;

        case CY_BLE_EVT_GAP_KEYINFO_EXCHNGE_CMPLT:
            DEBUG_PRINTF("CY_BLE_EVT_GAP_KEYINFO_EXCHNGE_CMPLT \r\n");
            break;

        case CY_BLE_EVT_GAP_SMP_NEGOTIATED_AUTH_INFO:
            DEBUG_PRINTF("CY_BLE_EVT_GAP_SMP_NEGOTIATED_AUTH_INFO:"
                       " bdHandle=%x, security=%x, bonding=%x, ekeySize=%x, err=%x \r\n",
                (*(cy_stc_ble_gap_auth_info_t *)eventParam).bdHandle,
                (*(cy_stc_ble_gap_auth_info_t *)eventParam).security,
                (*(cy_stc_ble_gap_auth_info_t *)eventParam).bonding,
                (*(cy_stc_ble_gap_auth_info_t *)eventParam).ekeySize,
                (*(cy_stc_ble_gap_auth_info_t *)eventParam).authErr);
            break;

        case CY_BLE_EVT_GAP_AUTH_COMPLETE:
            DEBUG_PRINTF("CY_BLE_EVT_GAP_AUTH_COMPLETE: bdHandle=%x, security=%x, bonding=%x, ekeySize=%x, err=%x \r\n",
                (*(cy_stc_ble_gap_auth_info_t *)eventParam).bdHandle,
                (*(cy_stc_ble_gap_auth_info_t *)eventParam).security,
                (*(cy_stc_ble_gap_auth_info_t *)eventParam).bonding,
                (*(cy_stc_ble_gap_auth_info_t *)eventParam).ekeySize,
                (*(cy_stc_ble_gap_auth_info_t *)eventParam).authErr);
            break;

        case CY_BLE_EVT_GAP_AUTH_FAILED:
            DEBUG_PRINTF("CY_BLE_EVT_GAP_AUTH_FAILED: bdHandle=%x, authErr=%x\r\n",
                (*(cy_stc_ble_gap_auth_info_t *)eventParam).bdHandle,
                (*(cy_stc_ble_gap_auth_info_t *)eventParam).authErr);
            break;

        case CY_BLE_EVT_GAP_DEVICE_CONNECTED:
            connIntv = ((cy_stc_ble_gap_connected_param_t *)eventParam)->connIntv * 5u /4u;
            DEBUG_PRINTF("CY_BLE_EVT_GAP_DEVICE_CONNECTED: connIntv = %d ms %d \r\n", connIntv,
                        ((cy_stc_ble_gap_connected_param_t *)eventParam)->status);
            keyInfo.SecKeyParam.bdHandle = (*(cy_stc_ble_gap_connected_param_t *)eventParam).bdHandle;
            apiResult = Cy_BLE_GAP_SetSecurityKeys(&keyInfo);
            if(apiResult != CY_BLE_SUCCESS)
            {
                DEBUG_PRINTF("Cy_BLE_GAP_SetSecurityKeys API Error: 0x%x \r\n", apiResult);
            }
            break;

        case CY_BLE_EVT_GAP_CONNECTION_UPDATE_COMPLETE:
            connIntv = ((cy_stc_ble_gap_conn_param_updated_in_controller_t *)eventParam)->connIntv * 5u /4u;
            DEBUG_PRINTF("CY_BLE_EVT_GAPC_CONNECTION_UPDATE_COMPLETE: %x, %x, %x, %x \r\n",
                ((cy_stc_ble_gap_conn_param_updated_in_controller_t *)eventParam)->status,
                ((cy_stc_ble_gap_conn_param_updated_in_controller_t *)eventParam)->connIntv,
                ((cy_stc_ble_gap_conn_param_updated_in_controller_t *)eventParam)->connLatency,
                ((cy_stc_ble_gap_conn_param_updated_in_controller_t *)eventParam)->supervisionTO
            );
            break;

        case CY_BLE_EVT_GAP_KEYS_GEN_COMPLETE:
            DEBUG_PRINTF("CY_BLE_EVT_GAP_KEYS_GEN_COMPLETE \r\n");
            keyInfo.SecKeyParam = (*(cy_stc_ble_gap_sec_key_param_t *)eventParam);
            Cy_BLE_GAP_SetIdAddress(&cy_ble_deviceAddress);
            break;

        case CY_BLE_EVT_GAP_DEVICE_DISCONNECTED:
            DEBUG_PRINTF("CY_BLE_EVT_GAP_DEVICE_DISCONNECTED: bdHandle=%x, reason=%x, status=%x\r\n",
                (*(cy_stc_ble_gap_disconnect_param_t *)eventParam).bdHandle,
                (*(cy_stc_ble_gap_disconnect_param_t *)eventParam).reason,
                (*(cy_stc_ble_gap_disconnect_param_t *)eventParam).status);

            apiResult = Cy_BLE_GAPC_StartScan(CY_BLE_SCANNING_FAST, 0u);                   /* Start Limited Discovery */
            if(apiResult != CY_BLE_SUCCESS)
            {
                DEBUG_PRINTF("StartScan API Error: 0x%x \r\n", apiResult);
            }
            break;

        case CY_BLE_EVT_GAP_ENCRYPT_CHANGE:
            DEBUG_PRINTF("CY_BLE_EVT_GAP_ENCRYPT_CHANGE: %x \r\n", *(uint8_t *)eventParam);
            break;

        /**********************************************************
        *                       GATT Events
        ***********************************************************/
        case CY_BLE_EVT_GATT_CONNECT_IND:
            appConnHandle = *(cy_stc_ble_conn_handle_t *)eventParam;
            DEBUG_PRINTF("CY_BLE_EVT_GATT_CONNECT_IND: %x, %x \r\n",
                (*(cy_stc_ble_conn_handle_t *)eventParam).attId,
                (*(cy_stc_ble_conn_handle_t *)eventParam).bdHandle);

            /* Send an L2CAP LE credit based connection request with a PSM set to LE_PSM_IPSP.
             * Once the peer responds, CY_BLE_EVT_L2CAP_CBFC_CONN_CNF
             * event will come up on this device.
             */

            {
                cy_stc_ble_l2cap_cbfc_connection_info_t bfcConnParam =
                {
                    .mtu = CY_BLE_L2CAP_MTU,
                    .mps = CY_BLE_L2CAP_MPS,
                    .credit = LE_DATA_CREDITS_IPSP
                };

                /* L2CAP Channel parameters for the local device */
                cy_stc_ble_l2cap_cbfc_conn_req_info_t cbfcConnParam =
                {
                    .bdHandle = appConnHandle.bdHandle,
                    .connParam = bfcConnParam,
                    .localPsm = CY_BLE_L2CAP_PSM_LE_PSM_IPSP,
                    .remotePsm = CY_BLE_L2CAP_PSM_LE_PSM_IPSP

                };

                apiResult = Cy_BLE_L2CAP_CbfcConnectReq(&cbfcConnParam);
                if(apiResult != CY_BLE_SUCCESS)
                {
                    DEBUG_PRINTF("Cy_BLE_L2CAP_CbfcConnectReq API Error: 0x%x \r\n", apiResult);
                }
                else
                {
                    DEBUG_PRINTF("L2CAP channel connection request sent. \r\n");
                }
            }
            break;

        case CY_BLE_EVT_GATT_DISCONNECT_IND:
           DEBUG_PRINTF("CY_BLE_EVT_GATT_DISCONNECT_IND: %x, %x \r\n",
                (*(cy_stc_ble_conn_handle_t *)eventParam).attId,
                (*(cy_stc_ble_conn_handle_t *)eventParam).bdHandle);
            break;

        case CY_BLE_EVT_GATTC_ERROR_RSP:
            DEBUG_PRINTF("GATT_ERROR_RSP: opcode: %x,  handle: %x,  errorcode: %x \r\n",
                ((cy_stc_ble_gatt_err_param_t *)eventParam)->errInfo.opCode,
                ((cy_stc_ble_gatt_err_param_t *)eventParam)->errInfo.attrHandle,
                ((cy_stc_ble_gatt_err_param_t *)eventParam)->errInfo.errorCode);
            break;

        /**********************************************************
        *                       L2CAP Events
        ***********************************************************/
        case CY_BLE_EVT_L2CAP_CBFC_CONN_CNF:
            l2capParameters = *((cy_stc_ble_l2cap_cbfc_conn_cnf_param_t *)eventParam);
            DEBUG_PRINTF("CY_BLE_EVT_L2CAP_CBFC_CONN_CNF: bdHandle=%d, lCid=%d, response=%d",
                l2capParameters.bdHandle,
                l2capParameters.lCid,
                l2capParameters.response);

            DEBUG_PRINTF(", connParam: mtu=%d, mps=%d, credit=%d\r\n",
                l2capParameters.connParam.mtu,
                l2capParameters.connParam.mps,
                l2capParameters.connParam.credit);
            l2capConnected = true;
            break;

        case CY_BLE_EVT_L2CAP_CBFC_DISCONN_IND:
            DEBUG_PRINTF("CY_BLE_EVT_L2CAP_CBFC_DISCONN_IND: %d \r\n", *(uint16_t *)eventParam);
            l2capConnected = false;
            break;

        /* Following two events are required, to receive data */
        case CY_BLE_EVT_L2CAP_CBFC_DATA_READ:
            {
                cy_stc_ble_l2cap_cbfc_rx_param_t *rxDataParam = (cy_stc_ble_l2cap_cbfc_rx_param_t *)eventParam;
                DEBUG_PRINTF("<- EVT_L2CAP_CBFC_DATA_READ: lCid=%d, result=%d, len=%d",
                    rxDataParam->lCid,
                    rxDataParam->result,
                    rxDataParam->rxDataLength);
            #if(DEBUG_UART_FULL)
                DEBUG_PRINTF(", data:");
                for(i = 0; i < rxDataParam->rxDataLength; i++)
                {
                    DEBUG_PRINTF("%2.2x", rxDataParam->rxData[i]);
                }
            #endif /* DEBUG_UART_FULL */
                DEBUG_PRINTF("\r\n");
                /* Data is received from Node, validate the content */
                if(memcmp(((uint8_t *)ipv6LoopbackBuffer), rxDataParam->rxData, L2CAP_MAX_LEN) != 0u)
                {
                    DEBUG_PRINTF("Wraparound failed \r\n");
                }
                else
                {
                    /* Send new Data packet to Node through IPSP channel  */
                    custom_command = '1';
                }
            }
            break;

        case CY_BLE_EVT_L2CAP_CBFC_RX_CREDIT_IND:
            {
                cy_stc_ble_l2cap_cbfc_low_rx_credit_param_t *rxCreditParam =
                    (cy_stc_ble_l2cap_cbfc_low_rx_credit_param_t *)eventParam;
                cy_stc_ble_l2cap_cbfc_credit_info_t l2capCbfcCreditParam =
                {
                    .credit   = LE_DATA_CREDITS_IPSP,
                    .localCid = rxCreditParam->lCid
                };

                DEBUG_PRINTF("CY_BLE_EVT_L2CAP_CBFC_RX_CREDIT_IND: lCid=%d, credit=%d \r\n",
                    rxCreditParam->lCid,
                    rxCreditParam->credit);

                /* This event informs that receive credits reached low mark.
                 * If the device expects more data to receive, send more credits back to the peer device.
                 */
                apiResult = Cy_BLE_L2CAP_CbfcSendFlowControlCredit(&l2capCbfcCreditParam);
                if(apiResult != CY_BLE_SUCCESS)
                {
                    DEBUG_PRINTF("Cy_BLE_L2CAP_CbfcSendFlowControlCredit API Error: 0x%x \r\n", apiResult);
                }
            }
            break;

        /* Following events are required, to send data */
        case CY_BLE_EVT_L2CAP_CBFC_TX_CREDIT_IND:
            DEBUG_PRINTF("CY_BLE_EVT_L2CAP_CBFC_TX_CREDIT_IND: lCid=%d, result=%d, credit=%d \r\n",
                ((cy_stc_ble_l2cap_cbfc_low_tx_credit_param_t *)eventParam)->lCid,
                ((cy_stc_ble_l2cap_cbfc_low_tx_credit_param_t *)eventParam)->result,
                ((cy_stc_ble_l2cap_cbfc_low_tx_credit_param_t *)eventParam)->credit);
            break;

        case CY_BLE_EVT_L2CAP_CBFC_DATA_WRITE_IND:
            #if(DEBUG_UART_FULL)
            {
                cy_ble_l2cap_cbfc_data_write_param_t *writeDataParam = (cy_ble_l2cap_cbfc_data_write_param_t*)eventParam;
                DEBUG_PRINTF("CY_BLE_EVT_L2CAP_CBFC_DATA_WRITE_IND: lCid=%d \r\n", writeDataParam->lCid);
            }
            #endif /* DEBUG_UART_FULL */
            break;

        /**********************************************************
        *                       Discovery Events
        ***********************************************************/
        case CY_BLE_EVT_GATTC_DISCOVERY_COMPLETE:
            DEBUG_PRINTF("CY_BLE_EVT_SERVER_DISCOVERY_COMPLETE \r\n");
            DEBUG_PRINTF("GATT %x-%x, \r\n",
                cy_ble_serverInfo[Cy_BLE_GetDiscoveryIdx(*(cy_stc_ble_conn_handle_t *)eventParam)][CY_BLE_SRVI_GATT].
                    range.startHandle,
                cy_ble_serverInfo[Cy_BLE_GetDiscoveryIdx(*(cy_stc_ble_conn_handle_t *)eventParam)][CY_BLE_SRVI_GATT].
                    range.endHandle);

            DEBUG_PRINTF("\r\nIPSP %x-%x: ",
                cy_ble_serverInfo[Cy_BLE_GetDiscoveryIdx(*(cy_stc_ble_conn_handle_t *)eventParam)][CY_BLE_SRVI_IPSS].
                    range.startHandle,
                cy_ble_serverInfo[Cy_BLE_GetDiscoveryIdx(*(cy_stc_ble_conn_handle_t *)eventParam)][CY_BLE_SRVI_IPSS].
                    range.endHandle);
            DEBUG_PRINTF("\r\n");
            break;

        /**********************************************************
        *                       Other Events
        ***********************************************************/
        case CY_BLE_EVT_PENDING_FLASH_WRITE:
            /* Inform application that flash write is pending. Stack internal data
            * structures are modified and require to be stored in Flash using
            * Cy_BLE_StoreBondingData() */
            DEBUG_PRINTF("CY_BLE_EVT_PENDING_FLASH_WRITE\r\n");
            break;

        default:
            DEBUG_PRINTF("Other event: 0x%lx \r\n", event);
            break;
    }
}


/*******************************************************************************
* Function Name: EnterLowPowerMode()
********************************************************************************
* Summary:
*  Configures the device to enter low power mode.
*
* Parameters:
*  None
*
* Return:
*  None
*
* Theory:
*  The function configures the device to enter deep sleep - whenever the
*  BLE is idle and the UART transmission/reception is not happening.
*
*  In case of disconnection, the function configures the device to
*  enter hibernate mode.
*
*******************************************************************************/
void EnterLowPowerMode(void)
{
    //DEBUG_PRINTF("Entering deep sleep mode \r\n");
    DEBUG_WAIT_UART_TX_COMPLETE();

    /* Configure deep sleep mode to wake up on interrupt */
    Cy_SysPm_DeepSleep(CY_SYSPM_WAIT_FOR_INTERRUPT);

    //DEBUG_PRINTF("Exiting deep sleep mode \r\n");
    DEBUG_WAIT_UART_TX_COMPLETE();
}
/* [] END OF FILE */
