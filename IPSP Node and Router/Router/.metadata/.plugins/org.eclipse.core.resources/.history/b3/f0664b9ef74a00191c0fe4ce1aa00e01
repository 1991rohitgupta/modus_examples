/*******************************************************************************
* File Name: BLEFindMe.c
*
* Version: 2.00
*
* Description:
*  This file contains BLE related functions.
*
********************************************************************************
* Copyright 2018-2019, Cypress Semiconductor Corporation.  All rights reserved.
* You may use this file only in accordance with the license, terms, conditions,
* disclaimers, and limitations in the end user license agreement accompanying
* the software package with which this file was provided.
*******************************************************************************/

#include <common.h>

/*******************************************************************************
* Variables to keep track of BLE connection handle
*******************************************************************************/

cy_en_ble_api_result_t          apiResult;
uint16_t                                    connIntv;                    /* in milliseconds / 1.25ms */
bool                                        l2capConnected = false;
cy_stc_ble_l2cap_cbfc_conn_cnf_param_t      l2capParameters;
cy_stc_ble_conn_handle_t                    appConnHandle;
cy_stc_ble_gap_bd_addr_t                    peerAddr[CY_BLE_MAX_ADV_DEVICES];
volatile uint32_t                           mainTimer = 1u;
uint8_t                                     advDevices = 0u;
uint8_t                                     deviceN = 0u;
uint8_t                                     state = STATE_INIT;
static uint16_t                             ipv6LoopbackBuffer[L2CAP_MAX_LEN/2];
uint8_t                                     custom_command = 0u;
cy_stc_ble_timer_info_t                     timerParam = { .timeout = TIMER_TIMEOUT };
char8 										command;

cy_stc_ble_conn_handle_t    appConnHandle;

/* IAS alert level value. This value is picked up in the main execution loop
   for driving the alert (Blue) LED. */
uint8 alertLevel = 0;

/* BLESS interrupt configuration structure */
const cy_stc_sysint_t  blessIsrCfg =
{
    /* The BLESS interrupt */
    .intrSrc       = bless_interrupt_IRQn,

    /* The interrupt priority number */
    .intrPriority  = 1u
};


/*******************************************************************************
*        Function prototypes
*******************************************************************************/
void StackEventHandler(uint32 event, void* eventParam);
void EnterLowPowerMode(void);

/*******************************************************************************
* Function Name: BlessInterrupt
*******************************************************************************/
void BlessInterrupt(void)
{
    Cy_BLE_BlessIsrHandler();
}

/*******************************************************************************
* Function Name: BleFindMe_Init()
********************************************************************************
*
* Summary:
*   This function initializes the BLE and UART components for use in the code
*   code example.
*
* Parameters:
*  None
*
* Return:
*   None
*
*******************************************************************************/
void HostInit(void)
{
    cy_stc_ble_stack_lib_version_t  stackVersion;

	/* Set up the device based on configurator selections */
	init_cycfg_all();


    /* Unfreeze IO if device is waking up from hibernate */
    if(Cy_SysPm_GetIoFreezeStatus())
    {
        Cy_SysPm_IoUnfreeze();
    }

    /* Start the UART debug port */
    UART_DEBUG_START();
    DEBUG_PRINTF("\r\n\nPSoC 6 MCU with BLE IPSP Router \r\n");

    /* Initialize the BLESS interrupt */
    cy_ble_config.hw->blessIsrConfig = &blessIsrCfg;
    Cy_SysInt_Init(cy_ble_config.hw->blessIsrConfig, BlessInterrupt);

    /* Register the generic event handler */
    Cy_BLE_RegisterEventCallback(StackEventHandler);

    /* Initialize the BLE host */
    apiResult = Cy_BLE_Init(&cy_ble_config);

    if(apiResult != CY_BLE_SUCCESS)
    {
        /* BLE stack initialization failed, check configuration,
           notify error and halt CPU in debug mode */
        DEBUG_PRINTF("Cy_BLE_Init API Error: %x \r\n", apiResult);
        ShowError();
    }
    else
    {
        DEBUG_PRINTF("Cy_BLE_Init API Success: %x \r\n", apiResult);
    }

    /* Enable BLE */
    apiResult = Cy_BLE_Enable();
    if(apiResult != CY_BLE_SUCCESS)
    {
        /* BLE stack initialization failed, check configuration,
           notify error and halt CPU in debug mode */
        DEBUG_PRINTF("Cy_BLE_Enable API Error: %x \r\n", apiResult);
        ShowError();
    }
    else
    {
        DEBUG_PRINTF("Cy_BLE_Enable API Success: %x \r\n", apiResult);
    }

    /* Enable BLE Low Power Mode (LPM) */
    Cy_BLE_EnableLowPowerMode();

	apiResult = Cy_BLE_GetStackLibraryVersion(&stackVersion);

    if(apiResult != CY_BLE_SUCCESS)
    {
        DEBUG_PRINTF("Cy_BLE_GetStackLibraryVersion API Error: 0x%2.2x \r\n", apiResult);
        ShowError();
    }
    else
    {
        DEBUG_PRINTF("Stack Version: %d.%d.%d.%d \r\n", stackVersion.majorVersion,
            stackVersion.minorVersion, stackVersion.patch, stackVersion.buildNumber);
    }

}

void ProcessUartCommands(char8 cmd)
{
    switch(cmd)
    {
        case 'c':                   /* Send connect request to selected peer device.  */
            Cy_BLE_GAPC_StopScan();
            state = STATE_CONNECTING;
            break;

        case 'v':                   /* Cancel connection request. */
            apiResult = Cy_BLE_GAPC_CancelDeviceConnection();
            DBG_PRINTF("Cy_BLE_GAPC_CancelDeviceConnection: %x\r\n" , apiResult);
            break;

        case 'd':                   /* Send disconnect request to peer device. */
            {
                cy_stc_ble_gap_disconnect_info_t disconnectInfoParam =
                {
                    .bdHandle = appConnHandle.bdHandle,
                    .reason = CY_BLE_HCI_ERROR_OTHER_END_TERMINATED_USER
                };
                apiResult = Cy_BLE_GAP_Disconnect(&disconnectInfoParam);
                if(apiResult != CY_BLE_SUCCESS)
                {
                    DBG_PRINTF("DisconnectDevice API Error: 0x%x \r\n", apiResult);
                }
                state = STATE_DISCONNECTED;
            }
            break;

        case 's':                   /* Start discovery procedure. */
            apiResult = Cy_BLE_GATTC_StartDiscovery(appConnHandle);
            DBG_PRINTF("StartDiscovery \r\n");
            if(apiResult != CY_BLE_SUCCESS)
            {
                DBG_PRINTF("StartDiscovery API Error: 0x%x \r\n", apiResult);
            }
            break;

        case 'z':                   /* Select specific peer device.  */
            DBG_PRINTF("Select Device:\n");
            while((command = UART_DEB_GET_CHAR()) == UART_DEB_NO_DATA);
            if((command >= '0') && (command <= '9'))
            {
                deviceN = (uint8)(command - '0');
                DBG_PRINTF("%c\n",command); /* print number */
            }
            else
            {
                DBG_PRINTF(" Wrong digit \r\n");
                break;
            }
            break;

            /**********************************************************
            *               L2Cap Commands (WrapAround)
            ***********************************************************/
        case '1':                   /* Send Data packet to node through IPSP channel */
            {
                static uint16_t counter = 0;
                static uint16_t repeats = 0;
                uint16_t i;
                cy_stc_ble_l2cap_cbfc_tx_data_info_t l2capCbfcTxDataParam;

                DBG_PRINTF("-> Cy_BLE_L2CAP_ChannelDataWrite #%d \r\n", repeats++);
                (void)repeats;
            #if(DEBUG_UART_FULL)
                DBG_PRINTF(", Data:");
            #endif /* DEBUG_UART_FULL */
                /* Fill output buffer by counter */
                for(i = 0u; i < L2CAP_MAX_LEN / 2u; i++)
                {
                    ipv6LoopbackBuffer[i] = counter++;
                #if(DEBUG_UART_FULL)
                    DBG_PRINTF("%4.4x", ipv6LoopbackBuffer[i]);
                #endif /* DEBUG_UART_FULL */
                }
                l2capCbfcTxDataParam.buffer = (uint8_t *)ipv6LoopbackBuffer;
                l2capCbfcTxDataParam.bufferLength = L2CAP_MAX_LEN;
                l2capCbfcTxDataParam.localCid = l2capParameters.lCid;
                apiResult = Cy_BLE_L2CAP_ChannelDataWrite(&l2capCbfcTxDataParam);
                if(apiResult != CY_BLE_SUCCESS)
                {
                    DBG_PRINTF("Cy_BLE_L2CAP_ChannelDataWrite API Error: 0x%x \r\n", apiResult);
                }
            }
            break;

        case 'h':                   /* Help menu */
            DBG_PRINTF("\r\n");
            DBG_PRINTF("Available commands:\r\n");
            DBG_PRINTF(" \'h\' - Help menu.\r\n");
            DBG_PRINTF(" \'z\' + 'Number' - Select peer device.\r\n");
            DBG_PRINTF(" \'c\' - Send connect request to peer device.\r\n");
            DBG_PRINTF(" \'d\' - Send disconnect request to peer device.\r\n");
            DBG_PRINTF(" \'v\' - Cancel connection request.\r\n");
            DBG_PRINTF(" \'s\' - Start discovery procedure.\r\n");
            DBG_PRINTF(" \'1\' - Send Data packet to Node through IPSP channel.\r\n");
            break;
    }
}
/*******************************************************************************
* Function Name: BleIPSPRouter_Process()
********************************************************************************
*
* Summary:
*   This function processes the BLE events and configures the device to enter
*   low power mode as required.
*
* Parameters:
*  None
*
* Return:
*   None
*
*******************************************************************************/

void BleIPSPRouter_Process(void)
{
    /* The call to EnterLowPowerMode also causes the device to enter hibernate
       mode if the BLE stack is shutdown */
    EnterLowPowerMode();
    /* Cy_BLE_ProcessEvents() allows BLE stack to process pending events */
    Cy_BLE_ProcessEvents();

    /* Restart timer */
    if(mainTimer != 0u)
    {
        mainTimer = 0u;
        Cy_BLE_StartTimer(&timerParam);
    }

    if(((command = UART_DEB_GET_CHAR()) != UART_DEB_NO_DATA) || ((custom_command != 0) &&
        (cy_ble_busyStatus[appConnHandle.attId] == 0u)))
    {
        if(custom_command != 0u)
        {
            command = custom_command;
            custom_command = 0u;
        }
        ProcessUartCommands(command);
    }

}

/*******************************************************************************
* Function Name: StackEventHandler()
********************************************************************************
*
* Summary:
*   This is an event callback function to receive events from the BLE Component.
*
* Parameters:
*  uint32 event:      event from the BLE component
*  void* eventParam:  parameters related to the event
*
* Return:
*   None
*
*******************************************************************************/
void StackEventHandler(uint32 event, void* eventParam)
{
    cy_en_ble_api_result_t      apiResult;
    uint8 i;

    switch (event)
	{
        /* There are some events generated by the BLE component
        *  that are not required for this code example. */

        /**********************************************************
        *                       General Events
        ***********************************************************/
		/* This event is received when the BLE stack is started */
        case CY_BLE_EVT_STACK_ON:
            DEBUG_PRINTF("CY_BLE_EVT_STACK_ON, Start Advertisement \r\n");

            /* Enter into discoverable mode so that remote device can search it */
            apiResult = Cy_BLE_GAPP_StartAdvertisement(CY_BLE_ADVERTISING_FAST, CY_BLE_PERIPHERAL_CONFIGURATION_0_INDEX);
            if(apiResult != CY_BLE_SUCCESS)
            {
                DEBUG_PRINTF("Start Advertisement API Error: %d \r\n", apiResult);
                ShowError();
                /* Execution does not continue beyond this point */
            }
            else
            {
                DEBUG_PRINTF("Start Advertisement API Success: %d \r\n", apiResult);
                Cy_GPIO_Write(Advertising_LED_PORT, Advertising_LED_PIN, LED_ON);
                Cy_GPIO_Write(Disconnect_LED_PORT, Disconnect_LED_PIN, LED_OFF);
                alertLevel = CY_BLE_NO_ALERT;
            }

            /* Get address of the device */
            apiResult = Cy_BLE_GAP_GetBdAddress();
            if(apiResult != CY_BLE_SUCCESS)
            {
                DEBUG_PRINTF("Cy_BLE_GAP_GetBdAddress API Error: %d \r\n", apiResult);
            }
            else
            {
                DEBUG_PRINTF("Cy_BLE_GAP_GetBdAddress API Success: %d \r\n", apiResult);
            }

            break;

        /* This event is received when there is a timeout */
        case CY_BLE_EVT_TIMEOUT:
            DEBUG_PRINTF("CY_BLE_EVT_TIMEOUT \r\n");
            break;

        /* This event indicates that some internal HW error has occurred */
		case CY_BLE_EVT_HARDWARE_ERROR:
            DEBUG_PRINTF("Hardware Error \r\n");
            ShowError();
			break;

        /*  This event will be triggered by host stack if BLE stack is busy or
         *  not busy. Parameter corresponding to this event will be the state
    	 *  of BLE stack.
         *  BLE stack busy = CYBLE_STACK_STATE_BUSY,
    	 *  BLE stack not busy = CYBLE_STACK_STATE_FREE
         */
    	case CY_BLE_EVT_STACK_BUSY_STATUS:
            DEBUG_PRINTF("CY_BLE_EVT_STACK_BUSY_STATUS: %x\r\n", *(uint8 *)eventParam);
            break;

        /* This event indicates completion of Set LE event mask */
        case CY_BLE_EVT_LE_SET_EVENT_MASK_COMPLETE:
            DEBUG_PRINTF("CY_BLE_EVT_LE_SET_EVENT_MASK_COMPLETE \r\n");
            break;

        /* This event indicates set device address command completed */
        case CY_BLE_EVT_SET_DEVICE_ADDR_COMPLETE:
            DEBUG_PRINTF("CY_BLE_EVT_SET_DEVICE_ADDR_COMPLETE \r\n");
            break;

        /* This event indicates get device address command completed
           successfully */
        case CY_BLE_EVT_GET_DEVICE_ADDR_COMPLETE:
            DEBUG_PRINTF("CY_BLE_EVT_GET_DEVICE_ADDR_COMPLETE: ");
            for(i = CY_BLE_GAP_BD_ADDR_SIZE; i > 0u; i--)
            {
                DEBUG_PRINTF("%2.2x", ((cy_stc_ble_bd_addrs_t *)((cy_stc_ble_events_param_generic_t *)eventParam)->eventParams)->publicBdAddr[i-1]);
            }
            DEBUG_PRINTF("\r\n");

            break;

        /* This event indicates set Tx Power command completed */
        case CY_BLE_EVT_SET_TX_PWR_COMPLETE:
            DEBUG_PRINTF("CY_BLE_EVT_SET_TX_PWR_COMPLETE \r\n");
            break;

        /* This event indicates that stack shutdown is complete */
        case CY_BLE_EVT_STACK_SHUTDOWN_COMPLETE:
            DEBUG_PRINTF("CY_BLE_EVT_STACK_SHUTDOWN_COMPLETE \r\n");

            DEBUG_PRINTF("Entering hibernate mode \r\n");
            DEBUG_WAIT_UART_TX_COMPLETE();
            Cy_SysPm_Hibernate();
            /* Code execution will not reach here */
            /* Device wakes up from hibernate and performs reset sequence
               when the reset switch or SW2 switch on the kit is pressed */
            break;

        /**********************************************************
        *                       GAP Events
        ***********************************************************/

        /* This event indicates peripheral device has started/stopped
           advertising */
        case CY_BLE_EVT_GAPP_ADVERTISEMENT_START_STOP:
            DEBUG_PRINTF("CY_BLE_EVT_GAPP_ADVERTISEMENT_START_STOP: ");

            if(Cy_BLE_GetAdvertisementState() == CY_BLE_ADV_STATE_ADVERTISING)
            {
                DEBUG_PRINTF("Advertisement started \r\n");
                Cy_GPIO_Write(Advertising_LED_PORT, Advertising_LED_PIN, LED_ON);
                Cy_GPIO_Write(Disconnect_LED_PORT, Disconnect_LED_PIN, LED_OFF);
            }
            else if(Cy_BLE_GetAdvertisementState() == CY_BLE_ADV_STATE_STOPPED)
            {
                DEBUG_PRINTF("Advertisement stopped \r\n");
                Cy_GPIO_Write(Advertising_LED_PORT, Advertising_LED_PIN, LED_OFF);
                Cy_GPIO_Write(Disconnect_LED_PORT, Disconnect_LED_PIN, LED_ON);

                /* Advertisement event timed out before connection, shutdown BLE
                * stack to enter hibernate mode and wait for device reset event
                * or SW2 press to wake up the device */
                Cy_BLE_Disable();
            }
            break;

        /* This event is generated at the GAP Peripheral end after connection
           is completed with peer Central device */
        case CY_BLE_EVT_GAP_DEVICE_CONNECTED:
            DEBUG_PRINTF("CY_BLE_EVT_GAP_DEVICE_CONNECTED \r\n");
            break;

        /* This event is generated when disconnected from remote device or
           failed to establish connection */
        case CY_BLE_EVT_GAP_DEVICE_DISCONNECTED:
            if(Cy_BLE_GetConnectionState(appConnHandle) == CY_BLE_CONN_STATE_DISCONNECTED)
            {
                DEBUG_PRINTF("CY_BLE_EVT_GAP_DEVICE_DISCONNECTED %d\r\n", CY_BLE_CONN_STATE_DISCONNECTED);
                alertLevel = CY_BLE_NO_ALERT;

                Cy_GPIO_Write(Advertising_LED_PORT, Advertising_LED_PIN, LED_OFF);
                Cy_GPIO_Write(Disconnect_LED_PORT, Disconnect_LED_PIN, LED_ON);

                /* Enter into discoverable mode so that remote device can search it */
                apiResult = Cy_BLE_GAPP_StartAdvertisement(CY_BLE_ADVERTISING_FAST, CY_BLE_PERIPHERAL_CONFIGURATION_0_INDEX);
                if(apiResult != CY_BLE_SUCCESS)
                {
                    DEBUG_PRINTF("Start Advertisement API Error: %d \r\n", apiResult);
                    ShowError();
                    /* Execution does not continue beyond this point */
                }
                else
                {
                    DEBUG_PRINTF("Start Advertisement API Success: %d \r\n", apiResult);
                    Cy_GPIO_Write(Advertising_LED_PORT, Advertising_LED_PIN, LED_ON);
                    Cy_GPIO_Write(Disconnect_LED_PORT, Disconnect_LED_PIN, LED_OFF);
                }

            }
            break;

        /* This event is generated at the GAP Central and the peripheral end
           after connection parameter update is requested from the host to
           the controller */
        case CY_BLE_EVT_GAP_CONNECTION_UPDATE_COMPLETE:
            DEBUG_PRINTF("CY_BLE_EVT_GAP_CONNECTION_UPDATE_COMPLETE \r\n");
            break;

        /* This event is triggered instead of 'CY_BLE_EVT_GAP_DEVICE_CONNECTED',
           if Link Layer Privacy is enabled in component customizer */
        case CY_BLE_EVT_GAP_ENHANCE_CONN_COMPLETE:

            /* BLE link is established */
            /* This event will be triggered since link layer privacy is enabled */
            DEBUG_PRINTF("CY_BLE_EVT_GAP_ENHANCE_CONN_COMPLETE \r\n");
            if(Cy_BLE_GetState() == CY_BLE_STATE_ON)
            {
                Cy_GPIO_Write(Advertising_LED_PORT, Advertising_LED_PIN, LED_OFF);
                Cy_GPIO_Write(Disconnect_LED_PORT, Disconnect_LED_PIN, LED_OFF);
            }
            break;

        /**********************************************************
        *                       GATT Events
        ***********************************************************/

        /* This event is generated at the GAP Peripheral end after connection
           is completed with peer Central device */
       case CY_BLE_EVT_GATT_CONNECT_IND:
            appConnHandle = *(cy_stc_ble_conn_handle_t *)eventParam;
            DEBUG_PRINTF("CY_BLE_EVT_GATT_CONNECT_IND: %x, %x \r\n",
                        (*(cy_stc_ble_conn_handle_t *)eventParam).attId,
                        (*(cy_stc_ble_conn_handle_t *)eventParam).bdHandle);
            break;

        /* This event is generated at the GAP Peripheral end after
           disconnection */
        case CY_BLE_EVT_GATT_DISCONNECT_IND:
            DEBUG_PRINTF("CY_BLE_EVT_GATT_DISCONNECT_IND \r\n");
            Cy_GPIO_Write(Disconnect_LED_PORT, Disconnect_LED_PIN, LED_ON);
            break;

        /* This event is triggered when 'GATT MTU Exchange Request'
           received from GATT client device */
        case CY_BLE_EVT_GATTS_XCNHG_MTU_REQ:
            DEBUG_PRINTF("CY_BLE_EVT_GATTS_XCNHG_MTU_REQ \r\n");
            break;

        /* This event is triggered when a read received from GATT
           client device */
        case CY_BLE_EVT_GATTS_READ_CHAR_VAL_ACCESS_REQ:
            DEBUG_PRINTF("CY_BLE_EVT_GATTS_READ_CHAR_VAL_ACCESS_REQ \r\n");
            break;

        /**********************************************************
        *                       Other Events
        ***********************************************************/
        default:
            DEBUG_PRINTF("Other event: %lx \r\n", (unsigned long) event);
			break;
	}
}

/*******************************************************************************
* Function Name: IasEventHandler
********************************************************************************
*
* Summary:
*  This is an event callback function to receive events from the BLE Component,
*  which are specific to Immediate Alert Service.
*
* Parameters:
*  uint32 event:      event from the BLE component
*  void* eventParams: parameters related to the event
*
* Return:
*  None
*
*******************************************************************************/
void IasEventHandler(uint32 event, void *eventParam)
{
    /* Alert Level Characteristic write event */
    if(event == CY_BLE_EVT_IASS_WRITE_CHAR_CMD)
    {
        /* Read the updated Alert Level value from the GATT database */
        Cy_BLE_IASS_GetCharacteristicValue(CY_BLE_IAS_ALERT_LEVEL,
            sizeof(alertLevel), &alertLevel);
    }

}

/*******************************************************************************
* Function Name: EnterLowPowerMode()
********************************************************************************
* Summary:
*  Configures the device to enter low power mode.
*
* Parameters:
*  None
*
* Return:
*  None
*
* Theory:
*  The function configures the device to enter deep sleep - whenever the
*  BLE is idle and the UART transmission/reception is not happening.
*
*  In case of disconnection, the function configures the device to
*  enter hibernate mode.
*
*******************************************************************************/
void EnterLowPowerMode(void)
{
    DEBUG_PRINTF("Entering deep sleep mode \r\n");
    DEBUG_WAIT_UART_TX_COMPLETE();

    /* Configure deep sleep mode to wake up on interrupt */
    Cy_SysPm_DeepSleep(CY_SYSPM_WAIT_FOR_INTERRUPT);

    DEBUG_PRINTF("Exiting deep sleep mode \r\n");
    DEBUG_WAIT_UART_TX_COMPLETE();
}
/* [] END OF FILE */
