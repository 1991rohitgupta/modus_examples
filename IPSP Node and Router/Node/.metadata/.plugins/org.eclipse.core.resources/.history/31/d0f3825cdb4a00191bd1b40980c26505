/*******************************************************************************
* File Name: BLEFindMe.c
*
* Version: 2.00
*
* Description:
*  This file contains BLE related functions.
*
********************************************************************************
* Copyright 2018-2019, Cypress Semiconductor Corporation.  All rights reserved.
* You may use this file only in accordance with the license, terms, conditions,
* disclaimers, and limitations in the end user license agreement accompanying
* the software package with which this file was provided.
*******************************************************************************/

#include <common.h>
#include <stdbool.h>



/*******************************************************************************
* Variables to keep track of BLE connection handle
*******************************************************************************/
cy_en_ble_api_result_t apiResult;
uint16_t                            connIntv;   /* in milliseconds / 1.25ms */
bool                                l2capConnected[CY_BLE_CONN_COUNT] = {false};
bool                                l2capReadReceived[CY_BLE_CONN_COUNT] = {false};
uint8_t                             ipv6LoopbackBuffer[CY_BLE_CONN_COUNT][L2CAP_MAX_LEN];
uint16_t                            ipv6LoopbackLength[CY_BLE_CONN_COUNT];
volatile uint32_t                   mainTimer = 1u;
cy_stc_ble_timer_info_t             timerParam = { .timeout = ADV_TIMER_TIMEOUT };

/* L2CAP Channel ID and parameters for the peer device */
cy_stc_ble_l2cap_cbfc_conn_ind_param_t   l2capParameters[CY_BLE_CONN_COUNT];

cy_stc_ble_conn_handle_t    appConnHandle;

/* IAS alert level value. This value is picked up in the main execution loop
   for driving the alert (Blue) LED. */
uint8 alertLevel = 0;

/* BLESS interrupt configuration structure */
const cy_stc_sysint_t  blessIsrCfg =
{
    /* The BLESS interrupt */
    .intrSrc       = bless_interrupt_IRQn,

    /* The interrupt priority number */
    .intrPriority  = 1u
};

/* MCWDT_isr */
const cy_stc_sysint_t MCWDT_isr_cfg =
{
    /* The MCWDT0 interrupt */
    .intrSrc = (IRQn_Type) srss_interrupt_mcwdt_0_IRQn,

	/* The interrupt priority number */
    .intrPriority = 7u
};

/*******************************************************************************
*        Function prototypes
*******************************************************************************/
void StackEventHandler(uint32 event, void* eventParam);
void EnterLowPowerMode(void);

/*******************************************************************************
* Function Name: BlessInterrupt
*******************************************************************************/
void BlessInterrupt(void)
{
    Cy_BLE_BlessIsrHandler();
}

/*******************************************************************************
* Function Name: HostInit()
********************************************************************************
*
* Summary:
*   This function initializes the BLE and UART components for use in the code
*   code example.
*
* Parameters:
*  None
*
* Return:
*   None
*
*******************************************************************************/
void HostInit(void)
{
    cy_en_ble_api_result_t          apiResult;
    cy_stc_ble_stack_lib_version_t  stackVersion;

	/* Set up the device based on configurator selections */
	init_cycfg_all();

    /* Unfreeze IO if device is waking up from hibernate */
    if(Cy_SysPm_GetIoFreezeStatus())
    {
        Cy_SysPm_IoUnfreeze();
    }

    /* Start the UART debug port */
    UART_DEBUG_START();
    DEBUG_PRINTF("\r\n\nPSoC 6 MCU with BLE IPSP Node \r\n");

    /* Initialize the BLESS interrupt */
    cy_ble_config.hw->blessIsrConfig = &blessIsrCfg;
    Cy_SysInt_Init(cy_ble_config.hw->blessIsrConfig, BlessInterrupt);

    /* Register the generic event handler */
    Cy_BLE_RegisterEventCallback(StackEventHandler);

    /* Initialize the BLE host */
    apiResult = Cy_BLE_Init(&cy_ble_config);

    if(apiResult != CY_BLE_SUCCESS)
    {
        /* BLE stack initialization failed, check configuration,
           notify error and halt CPU in debug mode */
        DEBUG_PRINTF("Cy_BLE_Init API Error: %x \r\n", apiResult);
        ShowError();
    }
    else
    {
        DEBUG_PRINTF("Cy_BLE_Init API Success: %x \r\n", apiResult);
    }

    /* Enable BLE */
    apiResult = Cy_BLE_Enable();
    if(apiResult != CY_BLE_SUCCESS)
    {
        /* BLE stack initialization failed, check configuration,
           notify error and halt CPU in debug mode */
        DEBUG_PRINTF("Cy_BLE_Enable API Error: %x \r\n", apiResult);
        ShowError();
    }
    else
    {
        DEBUG_PRINTF("Cy_BLE_Enable API Success: %x \r\n", apiResult);
    }

    /* Enable BLE Low Power Mode (LPM) */
    Cy_BLE_EnableLowPowerMode();

	apiResult = Cy_BLE_GetStackLibraryVersion(&stackVersion);

    if(apiResult != CY_BLE_SUCCESS)
    {
        DEBUG_PRINTF("Cy_BLE_GetStackLibraryVersion API Error: 0x%2.2x \r\n", apiResult);
        ShowError();
    }
    else
    {
        DEBUG_PRINTF("Stack Version: %d.%d.%d.%d \r\n", stackVersion.majorVersion,
            stackVersion.minorVersion, stackVersion.patch, stackVersion.buildNumber);
    }

}

/*******************************************************************************
* Function Name: BleFindMe_Process()
********************************************************************************
*
* Summary:
*   This function processes the BLE events and configures the device to enter
*   low power mode as required.
*
* Parameters:
*  None
*
* Return:
*   None
*
*******************************************************************************/
void BleIPSPNode_Process(void)
{

    /* Restart timer */
    if(mainTimer != 0u)
    {
        mainTimer = 0u;
        Cy_BLE_StartTimer(&timerParam);
    }

    /* Cy_Ble_ProcessEvents() allows BLE stack to process pending events */
    Cy_BLE_ProcessEvents();

    /* The call to EnterLowPowerMode also causes the device to enter hibernate
       mode if the BLE stack is shutdown */
    EnterLowPowerMode();

    if(Cy_BLE_GetNumOfActiveConn() > 0u)
    {
        static uint8_t l2capIndex = 0u;

        l2capIndex++;
        if(l2capIndex >= CY_BLE_CONN_COUNT)
        {
            l2capIndex = 0u;
        }

        /* Keep sending the data to the router, until TX credits are over */
        if((cy_ble_busyStatus[l2capIndex] == 0u) && (l2capConnected[l2capIndex] == true) &&
           (l2capReadReceived[l2capIndex] == true))
        {
            cy_stc_ble_l2cap_cbfc_tx_data_info_t l2capDataParam =
            {
                .buffer = ipv6LoopbackBuffer[l2capIndex],
                .bufferLength = ipv6LoopbackLength[l2capIndex],
                .localCid = l2capParameters[l2capIndex].lCid,
            };

            l2capReadReceived[l2capIndex] = false;

            apiResult = Cy_BLE_L2CAP_ChannelDataWrite(&l2capDataParam);
            DEBUG_PRINTF("-> Cy_BLE_L2CAP_ChannelDataWrite API result: %d \r\n", apiResult);
        }
    }

}

/*******************************************************************************
* Function Name: StackEventHandler()
********************************************************************************
*
* Summary:
*   This is an event callback function to receive events from the BLE Component.
*
* Parameters:
*  uint32 event:      event from the BLE component
*  void* eventParam:  parameters related to the event
*
* Return:
*   None
*
*******************************************************************************/
void StackEventHandler(uint32 event, void* eventParam)
{
    cy_en_ble_api_result_t apiResult;
    uint32_t i;
    static cy_stc_ble_gap_sec_key_info_t keyInfo =
    {
        .localKeysFlag    = CY_BLE_GAP_SMP_INIT_ENC_KEY_DIST |
                            CY_BLE_GAP_SMP_INIT_IRK_KEY_DIST |
                            CY_BLE_GAP_SMP_INIT_CSRK_KEY_DIST,
        .exchangeKeysFlag = CY_BLE_GAP_SMP_INIT_ENC_KEY_DIST |
                            CY_BLE_GAP_SMP_INIT_IRK_KEY_DIST |
                            CY_BLE_GAP_SMP_INIT_CSRK_KEY_DIST |
                            CY_BLE_GAP_SMP_RESP_ENC_KEY_DIST |
                            CY_BLE_GAP_SMP_RESP_IRK_KEY_DIST |
                            CY_BLE_GAP_SMP_RESP_CSRK_KEY_DIST,
    };

    switch (event)
    {
        /**********************************************************
        *                       General Events
        ***********************************************************/
        case CY_BLE_EVT_STACK_ON: /* This event received when component is Started */
            {
            	DEBUG_PRINTF("CY_BLE_EVT_STACK_ON, StartAdvertisement \r\n");

                /* Register IPSP protocol multiplexer to L2CAP and
                *  set the initial Receive Credit Low Mark for Based Flow Control mode
                */
                cy_stc_ble_l2cap_cbfc_psm_info_t l2capCbfcPsmParam =
                {
                    .creditLwm = LE_WATER_MARK_IPSP,
                    .l2capPsm  = CY_BLE_L2CAP_PSM_LE_PSM_IPSP,
                };
                apiResult = Cy_BLE_L2CAP_CbfcRegisterPsm(&l2capCbfcPsmParam);
                if(apiResult != CY_BLE_SUCCESS)
                {
                	DEBUG_PRINTF("Cy_BLE_L2CAP_CbfcRegisterPsm API Error: 0x%x \r\n", apiResult);
                }

                /* Enter into discoverable mode so that remote can find it. */
                apiResult = Cy_BLE_GAPP_StartAdvertisement(CY_BLE_ADVERTISING_FAST, CY_BLE_PERIPHERAL_CONFIGURATION_0_INDEX);
                if(apiResult != CY_BLE_SUCCESS)
                {
                    DEBUG_PRINTF("StartAdvertisement API Error: 0x%x \r\n", apiResult);
                }

                /* Generates the security keys */
                apiResult = Cy_BLE_GAP_GenerateKeys(&keyInfo);
                if(apiResult != CY_BLE_SUCCESS)
                {
                    DEBUG_PRINTF("Cy_BLE_GAP_GenerateKeys API Error: 0x%x \r\n", apiResult);
                }

            }
            break;

        case CY_BLE_EVT_TIMEOUT:
            if((((cy_stc_ble_timeout_param_t *)eventParam)->reasonCode == CY_BLE_GENERIC_APP_TO) &&
               (((cy_stc_ble_timeout_param_t *)eventParam)->timerHandle == timerParam.timerHandle))
            {

                /* Indicate that timer is raised to the main loop */
                mainTimer++;
            }
            else
            {
               DEBUG_PRINTF("CY_BLE_EVT_TIMEOUT: %x \r\n", *(cy_en_ble_to_reason_code_t *)eventParam);
            }
            break;

        case CY_BLE_EVT_HARDWARE_ERROR:    /* This event indicates that some internal HW error has occurred. */
            DEBUG_PRINTF("Hardware Error: 0x%x \r\n", *(uint8_t *)eventParam);
            break;

        /* This event will be triggered by host stack if BLE stack is busy or not busy.
         *  Parameter corresponding to this event will be the state of BLE stack.
         *  BLE stack busy = CY_BLE_STACK_STATE_BUSY,
         *  BLE stack not busy = CY_BLE_STACK_STATE_FREE
         */
        case CY_BLE_EVT_STACK_BUSY_STATUS:
            DEBUG_PRINTF("CY_BLE_EVT_STACK_BUSY_STATUS: %x\r\n", *(uint8_t *)eventParam);
            break;

        case CY_BLE_EVT_SET_TX_PWR_COMPLETE:
            DEBUG_PRINTF("CY_BLE_EVT_SET_TX_PWR_COMPLETE \r\n");
            break;

        case CY_BLE_EVT_LE_SET_EVENT_MASK_COMPLETE:
            DEBUG_PRINTF("CY_BLE_EVT_LE_SET_EVENT_MASK_COMPLETE \r\n");
            break;

        case CY_BLE_EVT_SET_DEVICE_ADDR_COMPLETE:
            DEBUG_PRINTF("CY_BLE_EVT_SET_DEVICE_ADDR_COMPLETE \r\n");

            /* Reads the BD device address from BLE Controller's memory */
            apiResult = Cy_BLE_GAP_GetBdAddress();
            if(apiResult != CY_BLE_SUCCESS)
            {
                DEBUG_PRINTF("Cy_BLE_GAP_GetBdAddress API Error: 0x%x \r\n", apiResult);
            }
            break;

        case CY_BLE_EVT_GET_DEVICE_ADDR_COMPLETE:
            DEBUG_PRINTF("CY_BLE_EVT_GET_DEVICE_ADDR_COMPLETE: ");
            for(i = CY_BLE_GAP_BD_ADDR_SIZE; i > 0u; i--)
            {
                DEBUG_PRINTF("%2.2x", ((cy_stc_ble_bd_addrs_t *)
                                    ((cy_stc_ble_events_param_generic_t *)eventParam)->eventParams)->publicBdAddr[i-1]);
            }
            DEBUG_PRINTF("\r\n");
            break;

        case CY_BLE_EVT_STACK_SHUTDOWN_COMPLETE:
            DEBUG_PRINTF("CY_BLE_EVT_STACK_SHUTDOWN_COMPLETE \r\n");
            DEBUG_PRINTF("Hibernate \r\n");
            UART_DEB_WAIT_TX_COMPLETE();
            /* Hibernate */
            Cy_SysPm_Hibernate();
            break;

        /**********************************************************
        *                       GAP Events
        ***********************************************************/
        case CY_BLE_EVT_GAP_AUTH_REQ:
            DEBUG_PRINTF("CY_BLE_EVT_AUTH_REQ: security=%x, bonding=%x, ekeySize=%x, err=%x \r\n",
                (*(cy_stc_ble_gap_auth_info_t *)eventParam).security,
                (*(cy_stc_ble_gap_auth_info_t *)eventParam).bonding,
                (*(cy_stc_ble_gap_auth_info_t *)eventParam).ekeySize,
                (*(cy_stc_ble_gap_auth_info_t *)eventParam).authErr);
            break;

        case CY_BLE_EVT_GAP_PASSKEY_ENTRY_REQUEST:
            DEBUG_PRINTF("CY_BLE_EVT_PASSKEY_ENTRY_REQUEST press 'p' to enter passkey \r\n");
            break;

        case CY_BLE_EVT_GAP_PASSKEY_DISPLAY_REQUEST:
            DEBUG_PRINTF("CY_BLE_EVT_PASSKEY_DISPLAY_REQUEST %6.6ld \r\n", *(uint32_t *)eventParam);
            break;

        case CY_BLE_EVT_GAP_KEYINFO_EXCHNGE_CMPLT:
            DEBUG_PRINTF("CY_BLE_EVT_GAP_KEYINFO_EXCHNGE_CMPLT \r\n");
            break;

        case CY_BLE_EVT_GAP_AUTH_COMPLETE:
            DEBUG_PRINTF("CY_BLE_EVT_GAP_AUTH_COMPLETE: bdHandle=%x, security=%x, bonding=%x, ekeySize=%x, err=%x \r\n",
                (*(cy_stc_ble_gap_auth_info_t *)eventParam).bdHandle,
                (*(cy_stc_ble_gap_auth_info_t *)eventParam).security,
                (*(cy_stc_ble_gap_auth_info_t *)eventParam).bonding,
                (*(cy_stc_ble_gap_auth_info_t *)eventParam).ekeySize,
                (*(cy_stc_ble_gap_auth_info_t *)eventParam).authErr);
            break;

        case CY_BLE_EVT_GAP_AUTH_FAILED:
            DEBUG_PRINTF("CY_BLE_EVT_GAP_AUTH_FAILED: bdHandle=%x, authErr=%x\r\n",
                (*(cy_stc_ble_gap_auth_info_t *)eventParam).bdHandle,
                (*(cy_stc_ble_gap_auth_info_t *)eventParam).authErr);
            break;

        case CY_BLE_EVT_GAPP_ADVERTISEMENT_START_STOP:
            {
                DEBUG_PRINTF("CY_BLE_EVT_GAPP_ADVERTISEMENT_START_STOP, state: %d \r\n", Cy_BLE_GetAdvertisementState());
                UpdateLedState();
                if((Cy_BLE_GetAdvertisementState() == CY_BLE_ADV_STATE_STOPPED) && (Cy_BLE_GetNumOfActiveConn() == 0u))
                {
                    /* Fast and slow advertising period complete, go to low power
                     * mode (Hibernate) and wait for an external
                     * user event to wake up the device again */
                    UpdateLedState();
                    Cy_BLE_Stop();
                }
            }
            break;

        case CY_BLE_EVT_GAP_DEVICE_CONNECTED:
            UpdateLedState();
            connIntv = ((cy_stc_ble_gap_connected_param_t *)eventParam)->connIntv * 5u /4u;
            DEBUG_PRINTF("CY_BLE_EVT_GAP_DEVICE_CONNECTED: connIntv = %d ms \r\n", connIntv);
            keyInfo.SecKeyParam.bdHandle = (*(cy_stc_ble_gap_connected_param_t *)eventParam).bdHandle;
            apiResult = Cy_BLE_GAP_SetSecurityKeys(&keyInfo);
            if(apiResult != CY_BLE_SUCCESS)
            {
                DEBUG_PRINTF("Cy_BLE_GAP_SetSecurityKeys API Error: 0x%x \r\n", apiResult);
            }
            break;

        case CY_BLE_EVT_GAP_KEYS_GEN_COMPLETE:
            DEBUG_PRINTF("CY_BLE_EVT_GAP_KEYS_GEN_COMPLETE \r\n");
            keyInfo.SecKeyParam = (*(cy_stc_ble_gap_sec_key_param_t *)eventParam);
            Cy_BLE_GAP_SetIdAddress(&cy_ble_deviceAddress);
            break;

        case CY_BLE_EVT_GAP_CONNECTION_UPDATE_COMPLETE:
            connIntv = ((cy_stc_ble_gap_conn_param_updated_in_controller_t *)eventParam)->connIntv * 5u /4u;
            DEBUG_PRINTF("CY_BLE_EVT_GAP_CONNECTION_UPDATE_COMPLETE: connIntv = %d ms \r\n", connIntv);
            break;

        case CY_BLE_EVT_GAP_DEVICE_DISCONNECTED:
            DEBUG_PRINTF("CY_BLE_EVT_GAP_DEVICE_DISCONNECTED: bdHandle=%x, reason=%x, status=%x\r\n",
                (*(cy_stc_ble_gap_disconnect_param_t *)eventParam).bdHandle,
                (*(cy_stc_ble_gap_disconnect_param_t *)eventParam).reason,
                (*(cy_stc_ble_gap_disconnect_param_t *)eventParam).status);

            if(Cy_BLE_GetNumOfActiveConn() == (CONN_COUNT - 1u))
            {
                apiResult =
                    Cy_BLE_GAPP_StartAdvertisement(CY_BLE_ADVERTISING_FAST, CY_BLE_PERIPHERAL_CONFIGURATION_0_INDEX);
                if(apiResult != CY_BLE_SUCCESS)
                {
                    DEBUG_PRINTF("StartAdvertisement API Error: 0x%x \r\n", apiResult);
                }
            }
            break;

        case CY_BLE_EVT_GAP_ENCRYPT_CHANGE:
            DEBUG_PRINTF("CY_BLE_EVT_GAP_ENCRYPT_CHANGE: %x \r\n", *(uint8_t *)eventParam);
            break;

        case CY_BLE_EVT_GATTS_READ_CHAR_VAL_ACCESS_REQ:
            /* Triggered on server side when client sends read request and when
            * characteristic has CY_BLE_GATT_DB_ATTR_CHAR_VAL_RD_EVENT property set.
            * This event could be ignored by application unless it need to response
            * by error response which needs to be set in gattErrorCode field of
            * event parameter. */
            DEBUG_PRINTF("CY_BLE_EVT_GATTS_READ_CHAR_VAL_ACCESS_REQ: handle: %x \r\n",
                ((cy_stc_ble_gatts_char_val_read_req_t *)eventParam)->attrHandle);
            break;

        /**********************************************************
        *                       GATT Events
        ***********************************************************/
        case CY_BLE_EVT_GATT_CONNECT_IND:
            DEBUG_PRINTF("CY_BLE_EVT_GATT_CONNECT_IND: %x, %x \r\n",
                (*(cy_stc_ble_conn_handle_t *)eventParam).attId,
                (*(cy_stc_ble_conn_handle_t *)eventParam).bdHandle);
            break;

        case CY_BLE_EVT_GATT_DISCONNECT_IND:
            DEBUG_PRINTF("CY_BLE_EVT_GATT_DISCONNECT_IND: %x, %x \r\n",
                (*(cy_stc_ble_conn_handle_t *)eventParam).attId,
                (*(cy_stc_ble_conn_handle_t *)eventParam).bdHandle);
            break;

        /**********************************************************
        *                       L2CAP Events
        ***********************************************************/
        case CY_BLE_EVT_L2CAP_CBFC_CONN_IND:
            l2capParameters[Cy_BLE_GetConnHandleByBdHandle((*(cy_stc_ble_l2cap_cbfc_conn_ind_param_t *)eventParam).bdHandle).attId] =
                *((cy_stc_ble_l2cap_cbfc_conn_ind_param_t *)eventParam);
            DEBUG_PRINTF("CY_BLE_EVT_L2CAP_CBFC_CONN_IND: bdHandle=%d, lCid=%d, psm=%d,connParam mtu=%d, mps=%d, credit=%d ",
                (*(cy_stc_ble_l2cap_cbfc_conn_ind_param_t *)eventParam).bdHandle,
                (*(cy_stc_ble_l2cap_cbfc_conn_ind_param_t *)eventParam).lCid,
                (*(cy_stc_ble_l2cap_cbfc_conn_ind_param_t *)eventParam).psm,
                (*(cy_stc_ble_l2cap_cbfc_conn_ind_param_t *)eventParam).connParam.mtu,
                (*(cy_stc_ble_l2cap_cbfc_conn_ind_param_t *)eventParam).connParam.mps,
                (*(cy_stc_ble_l2cap_cbfc_conn_ind_param_t *)eventParam).connParam.credit);
            if((*(cy_stc_ble_l2cap_cbfc_conn_ind_param_t *)eventParam).psm == CY_BLE_L2CAP_PSM_LE_PSM_IPSP)
            {
                cy_stc_ble_l2cap_cbfc_connection_info_t connParam =
                {
                   .mtu    = CY_BLE_L2CAP_MTU,
                   .mps    = CY_BLE_L2CAP_MPS,
                   .credit = LE_DATA_CREDITS_IPSP
                };

                cy_stc_ble_l2cap_cbfc_conn_resp_info_t l2capCbfcParam =
                {
                    .connParam = connParam,
                    .localCid  = (*(cy_stc_ble_l2cap_cbfc_conn_ind_param_t *)eventParam).lCid,
                    .response  = CY_BLE_L2CAP_CONNECTION_SUCCESSFUL
                };

                apiResult = Cy_BLE_L2CAP_CbfcConnectRsp(&l2capCbfcParam);
                DEBUG_PRINTF("SUCCESSFUL \r\n");
                l2capConnected[Cy_BLE_GetConnHandleByBdHandle((*(cy_stc_ble_l2cap_cbfc_conn_ind_param_t *)eventParam).bdHandle).attId] = true;
            }
            else
            {
                cy_stc_ble_l2cap_cbfc_conn_resp_info_t l2capCbfcParam =
                {
                    .connParam = (*(cy_stc_ble_l2cap_cbfc_conn_ind_param_t *)eventParam).connParam,
                    .localCid  = (*(cy_stc_ble_l2cap_cbfc_conn_ind_param_t *)eventParam).lCid,
                    .response  = CY_BLE_L2CAP_CONNECTION_REFUSED_PSM_UNSUPPORTED
                };
                apiResult = Cy_BLE_L2CAP_CbfcConnectRsp(&l2capCbfcParam);
                DEBUG_PRINTF("UNSUPPORTED \r\n");
            }
            if(apiResult != CY_BLE_SUCCESS)
            {
                DEBUG_PRINTF("Cy_BLE_L2CAP_CbfcConnectRsp API Error: 0x%x \r\n", apiResult);
            }
            break;

        case CY_BLE_EVT_L2CAP_CBFC_DISCONN_IND:
            {
                uint8_t i;
                DEBUG_PRINTF("CY_BLE_EVT_L2CAP_CBFC_DISCONN_IND: lCid=%d \r\n", *(uint16_t *)eventParam);
                for(i = 0u; i < CY_BLE_CONN_COUNT; i++)
                {
                    if(l2capParameters[i].lCid == *(uint16_t *)eventParam)
                    {
                        l2capConnected[i] = false;
                        break;
                    }
                }
                break;
            }


        /* Following two events are required to receive data */
        case CY_BLE_EVT_L2CAP_CBFC_DATA_READ:
            {
                cy_stc_ble_l2cap_cbfc_rx_param_t *rxDataParam = (cy_stc_ble_l2cap_cbfc_rx_param_t *)eventParam;
                uint8_t i;
                DEBUG_PRINTF("<- EVT_L2CAP_CBFC_DATA_READ: lCid=%d, result=%d, len=%d",
                    rxDataParam->lCid,
                    rxDataParam->result,
                    rxDataParam->rxDataLength);
            #if(DEBUG_UART_FULL)
                DEBUG_PRINTF(", data:");
                for(i = 0; i < rxDataParam->rxDataLength; i++)
                {
                    DEBUG_PRINTF("%2.2x", rxDataParam->rxData[i]);
                }
            #endif /* DEBUG_UART_FULL */
                DEBUG_PRINTF("\r\n");
                for(i = 0u; i < CY_BLE_CONN_COUNT; i++)
                {
                    if(l2capParameters[i].lCid == rxDataParam->lCid)
                    {
                        /* Data is received from Router. Copy the data to a memory buffer */
                        if(rxDataParam->rxDataLength <= L2CAP_MAX_LEN)
                        {
                            ipv6LoopbackLength[i] = rxDataParam->rxDataLength;
                        }
                        else
                        {
                            ipv6LoopbackLength[i] = L2CAP_MAX_LEN;
                        }
                        memcpy(ipv6LoopbackBuffer[i], rxDataParam->rxData, ipv6LoopbackLength[i]);
                        l2capReadReceived[i] = true;
                        break;
                    }
                }
                break;
            }


        case CY_BLE_EVT_L2CAP_CBFC_RX_CREDIT_IND:
            {
                cy_stc_ble_l2cap_cbfc_low_rx_credit_param_t *rxCreditParam = (cy_stc_ble_l2cap_cbfc_low_rx_credit_param_t *)eventParam;
                cy_stc_ble_l2cap_cbfc_credit_info_t l2capCbfcCreditParam =
                {
                    .credit   = LE_DATA_CREDITS_IPSP,
                    .localCid = rxCreditParam->lCid
                };

                DEBUG_PRINTF("CY_BLE_EVT_L2CAP_CBFC_RX_CREDIT_IND: lCid=%d, credit=%d \r\n",
                    rxCreditParam->lCid,
                    rxCreditParam->credit);

                /* This event informs that receive credits reached the low mark.
                 * If the device expects more data to receive, send more credits back to the peer device.
                 */
                apiResult = Cy_BLE_L2CAP_CbfcSendFlowControlCredit(&l2capCbfcCreditParam);
                if(apiResult != CY_BLE_SUCCESS)
                {
                    DEBUG_PRINTF("Cy_BLE_L2CAP_CbfcSendFlowControlCredit API Error: 0x%x \r\n", apiResult);
                }
                break;
            }

        /* Following events are required to send data */
        case CY_BLE_EVT_L2CAP_CBFC_TX_CREDIT_IND:
            DEBUG_PRINTF("CY_BLE_EVT_L2CAP_CBFC_TX_CREDIT_IND: lCid=%d, result=%d, credit=%d \r\n",
                ((cy_stc_ble_l2cap_cbfc_low_tx_credit_param_t *)eventParam)->lCid,
                ((cy_stc_ble_l2cap_cbfc_low_tx_credit_param_t *)eventParam)->result,
                ((cy_stc_ble_l2cap_cbfc_low_tx_credit_param_t *)eventParam)->credit);
            break;

        case CY_BLE_EVT_L2CAP_CBFC_DATA_WRITE_IND:
            #if(DEBUG_UART_FULL)
            {
                cy_ble_l2cap_cbfc_data_write_param_t *writeDataParam = (cy_ble_l2cap_cbfc_data_write_param_t*)eventParam;
                DEBUG_PRINTF("CY_BLE_EVT_L2CAP_CBFC_DATA_WRITE_IND: lCid=%d, result=%d \r\n",
                    writeDataParam->lCid,
                    writeDataParam->result);
            }
            #endif /* DEBUG_UART_FULL */
            break;

        /**********************************************************
        *                       Other Events
        ***********************************************************/
        case CY_BLE_EVT_PENDING_FLASH_WRITE:
            /* Inform application that flash write is pending. Stack internal data
            * structures are modified and require to be stored in Flash using
            * Cy_BLE_StoreBondingData() */
            DEBUG_PRINTF("CY_BLE_EVT_PENDING_FLASH_WRITE\r\n");
            break;

        default:
            DEBUG_PRINTF("Other event: 0x%lx \r\n", event);
            break;
    }

}


/*******************************************************************************
* Function Name: EnterLowPowerMode()
********************************************************************************
* Summary:
*  Configures the device to enter low power mode.
*
* Parameters:
*  None
*
* Return:
*  None
*
* Theory:
*  The function configures the device to enter deep sleep - whenever the
*  BLE is idle and the UART transmission/reception is not happening.
*
*  In case of disconnection, the function configures the device to
*  enter hibernate mode.
*
*******************************************************************************/
void EnterLowPowerMode(void)
{
    DEBUG_PRINTF("Entering deep sleep mode \r\n");
    DEBUG_WAIT_UART_TX_COMPLETE();

    /* Configure deep sleep mode to wake up on interrupt */
    Cy_SysPm_DeepSleep(CY_SYSPM_WAIT_FOR_INTERRUPT);

    DEBUG_PRINTF("Exiting deep sleep mode \r\n");
    DEBUG_WAIT_UART_TX_COMPLETE();
}
/* [] END OF FILE */
